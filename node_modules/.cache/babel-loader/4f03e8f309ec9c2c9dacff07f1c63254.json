{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const contactSlice = createSlice({\n  name: 'contacts',\n  initialState: {\n    contacts: []\n  },\n  reducers: {\n    setContacts: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.contacts = payload;\n    },\n    addContact: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.contacts.push(payload);\n    },\n    deleteContact: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.contacts = state.contacts.filter(c => c !== payload);\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  setContacts,\n  deleteContact,\n  addContact\n} = contactSlice.actions;\nexport default contactSlice.reducer;","map":{"version":3,"sources":["/Users/ishan/Desktop/NYU/dev/eulerity-pets-app/src/store/contactSlice.js"],"names":["createSlice","contactSlice","name","initialState","contacts","reducers","setContacts","state","payload","addContact","push","deleteContact","filter","c","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAGA,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC;AACtCE,EAAAA,IAAI,EAAE,UADgC;AAEtCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE;AADE,GAFwB;AAKtCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAE,CAACC,KAAD,WAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACnCD,MAAAA,KAAK,CAACH,QAAN,GAAiBI,OAAjB;AACD,KAHO;AAIRC,IAAAA,UAAU,EAAE,CAACF,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AAClCD,MAAAA,KAAK,CAACH,QAAN,CAAeM,IAAf,CAAoBF,OAApB;AACD,KANO;AAORG,IAAAA,aAAa,EAAE,CAACJ,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACrCD,MAAAA,KAAK,CAACH,QAAN,GAAiBG,KAAK,CAACH,QAAN,CAAeQ,MAAf,CAAuBC,CAAD,IAAOA,CAAC,KAAIL,OAAlC,CAAjB;AACD;AATO;AAL4B,CAAD,CAAhC,C,CAkBP;;AACA,OAAO,MAAM;AAAEF,EAAAA,WAAF;AAAeK,EAAAA,aAAf;AAA8BF,EAAAA;AAA9B,IAA6CR,YAAY,CAACa,OAAhE;AAEP,eAAeb,YAAY,CAACc,OAA5B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\n\nexport const contactSlice = createSlice({\n  name: 'contacts',\n  initialState: {\n    contacts: [],\n  },\n  reducers: {\n    setContacts: (state, { payload }) => {\n      state.contacts = payload\n    },\n    addContact: (state, { payload }) => {\n      state.contacts.push(payload)\n    },\n    deleteContact: (state, { payload }) => {\n      state.contacts = state.contacts.filter((c) => c!== payload)\n    },\n  },\n})\n\n// Action creators are generated for each case reducer function\nexport const { setContacts, deleteContact, addContact } = contactSlice.actions\n\nexport default contactSlice.reducer"]},"metadata":{},"sourceType":"module"}